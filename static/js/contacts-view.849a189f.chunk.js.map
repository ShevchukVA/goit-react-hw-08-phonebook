{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","components/filter/Filter.module.css","components/logo/Logo.module.css","components/contactItem/ContactItem.module.css","redux/contacts/contactsOperations.js","components/contactForm/ContactForm.js","redux/contacts/contactsSelector.js","components/contactItem/ContactItem.js","components/contactList/ContactList.js","components/filter/Filter.js","components/logo/Logo.js","views/ContactsViews.js"],"names":["module","exports","addContact","name","number","dispatch","getState","error","text","delay","isExistingContact","contacts","items","map","contact","toLowerCase","includes","alert","contactsActions","addContactRequest","axios","post","then","data","addContactSuccess","catch","addContactError","massage","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","state","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","className","styles","container","label","input","type","autoComplete","placeholder","onChange","button","Component","mapDispatchToProps","contactsOperations","connect","getContacts","getFilter","filter","getVisibleContacts","createSelector","item","getLoading","loading","getContactsById","contactId","find","ContactItem","onRemoveContact","onClick","defaultProps","ownProps","contactsSelector","TransitionGroup","component","list","CSSTransition","key","classNames","timeout","onChangeFilter","filterContacts","box","Logo","ContactsViews","onFetchContacts","isLoadingContacts","Loader","in","appear","stylesLogo","unmountOnExit","isContacts","length","stylesFilter","stylesList"],"mappings":"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","file":"static/js/contacts-view.849a189f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1evjh\",\"label\":\"ContactForm_label__MrT3T\",\"input\":\"ContactForm_input__1_Yy8\",\"button\":\"ContactForm_button__1JMdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1P58a\",\"enter\":\"ContactList_enter__3XbOW\",\"enterActive\":\"ContactList_enterActive__6pOU8\",\"exit\":\"ContactList_exit__2knmL\",\"exitActive\":\"ContactList_exitActive__1Y-vP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Filter_box__W3h78\",\"text\":\"Filter_text__1zy8H\",\"input\":\"Filter_input__3h2NW\",\"enter\":\"Filter_enter__2HUiU\",\"enterActive\":\"Filter_enterActive__3cgW4\",\"exit\":\"Filter_exit__3W575\",\"exitActive\":\"Filter_exitActive__3CvqT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Logo_box__14cGm\",\"text\":\"Logo_text__cnAIe\",\"appear\":\"Logo_appear__2HEGx\",\"appearActive\":\"Logo_appearActive__2a62J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__-M8tq\",\"button\":\"ContactItem_button__wXX4y\",\"text\":\"ContactItem_text__7B3E-\"};","import axios from 'axios';\r\nimport { alert, error } from '@pnotify/core';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst addContact = ({ name, number }) => (dispatch, getState) => {\r\n  if (name === '' || number === '') {\r\n    error({ text: 'Please, enter name or number', delay: 2500 });\r\n  }\r\n\r\n  const { contacts } = getState();\r\n\r\n  const names = contacts.items.map(contact => contact.name.toLowerCase());\r\n\r\n  const isExistingContact = names.includes(name);\r\n\r\n  if (isExistingContact) {\r\n    alert({ text: `${name} is alredy in contacts`, delay: 2500 });\r\n    return;\r\n  }\r\n\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  if (!isExistingContact) {\r\n    axios\r\n      .post('/contacts', { name, number })\r\n      .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n      .catch(error => dispatch(contactsActions.addContactError(error.massage)));\r\n  }\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch(error =>\r\n      dispatch(contactsActions.fetchContactsError(error.massage)),\r\n    );\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n    .catch(error =>\r\n      dispatch(contactsActions.removeContactError(error.massage)),\r\n    );\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddContact(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={styles.container}>\r\n          <label className={styles.label}>\r\n            Name\r\n            <input\r\n              className={styles.input}\r\n              type=\"name\"\r\n              name=\"name\"\r\n              value={name}\r\n              autoComplete=\"off\"\r\n              placeholder=\"Please enter name\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label className={styles.label}>\r\n            Number\r\n            <input\r\n              className={styles.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              autoComplete=\"off\"\r\n              placeholder=\"Please enter number\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={styles.button}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(item =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getContactsById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n\r\n  return contacts.find(item => item.id === contactId);\r\n};\r\n\r\nexport default {\r\n  getContacts,\r\n  getLoading,\r\n  getVisibleContacts,\r\n  getFilter,\r\n  getContactsById,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelector from '../../redux/contacts/contactsSelector';\r\nimport styles from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, onRemoveContact }) => (\r\n  <li className={styles.item}>\r\n    <p className={styles.text}>{name}:</p>\r\n    <p className={styles.text}>{number}</p>\r\n    <button className={styles.button} type=\"button\" onClick={onRemoveContact}>\r\n      X\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactItem.defaultProps = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = contactsSelector.getContactsById(state, ownProps.id);\r\n  return {\r\n    ...contact,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveContact: () =>\r\n    dispatch(contactsOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactItem);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport ContactItem from '../contactItem/ContactItem';\r\nimport contactsSelector from '../../redux/contacts/contactsSelector';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => (\r\n  <>\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames={styles} timeout={250}>\r\n          <ContactItem id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelector.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelector from '../../redux/contacts/contactsSelector';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <div className={styles.box}>\r\n    <p className={styles.text}>Find contacts by name</p>\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={e => onChangeFilter(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelector.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.filterContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './Logo.module.css';\r\n\r\nconst Logo = () => (\r\n  <div className={styles.box}>\r\n    <h1 className={styles.text}>Phonebook</h1>\r\n  </div>\r\n);\r\n\r\nexport default Logo;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport ContactForm from '../components/contactForm/ContactForm';\r\nimport ContactList from '../components/contactList/ContactList';\r\nimport Filter from '../components/filter/Filter';\r\nimport Logo from '../components/logo/Logo';\r\nimport Loader from '../components/loader/Loader';\r\nimport { contactsOperations, contactsSelector } from '../redux/contacts';\r\nimport stylesLogo from '../components/logo/Logo.module.css';\r\nimport stylesList from '../components/contactList/ContactList.module.css';\r\nimport stylesFilter from '../components/filter/Filter.module.css';\r\n\r\nclass ContactsViews extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.isLoadingContacts && <Loader />}\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames={stylesLogo}\r\n          unmountOnExit\r\n        >\r\n          <Logo />\r\n        </CSSTransition>\r\n        <ContactForm />\r\n        <CSSTransition\r\n          in={this.props.isContacts.length > 0}\r\n          timeout={250}\r\n          classNames={stylesFilter}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n        <CSSTransition\r\n          in={this.props.isContacts.length > 0}\r\n          timeout={250}\r\n          classNames={stylesList}\r\n          unmountOnExit\r\n        >\r\n          <ContactList />\r\n        </CSSTransition>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelector.getLoading(state),\r\n  isContacts: contactsSelector.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsViews);\r\n"],"sourceRoot":""}